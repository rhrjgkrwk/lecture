1. 어노테이션(Annotation) 이란 ?
클래스나 메소드 등의 선언 시에 @ 를 사용하는 것을 말한다.
참고로 클래스, 메소드, 변수 등 모든 요소에 선언할 수 있다.
메타 데이터(Metadata) 라고도 불리며, JDK 5 부터 등장했다고 한다.

* 언제 사용하는가?
- 컴파일러에게 정보를 알려주거나
- 컴파일 할 때와 설치 시의 작업을 지정하거나
- 실행할 때 별도의 처리가 필요할 때

2. Bulit-in Annotation
자바에서는 기본적으로 제공하는 어노테이션들이 존재한다.(JDK 6 기준)
@Override - 메소드가 오버라이드 됐는지 검증한다. 
                          만약 부모 클래스 또는 구현해야할 인터페이스에서 해당 메소드를 찾을 수 없다면 컴파일 오류가 난다.
@Deprecated - 메소드를 사용하지 말도록 유도한다. 만약 사용한다면 컴파일 경고를 일으킨다.
@SuppressWarnings - 컴파일 경고를 무시하도록 한다.
@SafeVarargs - 제너릭 같은 가변인자 매개변수를 사용할 때 경고를 무시한다. (자바7 이상)
@FunctionalInterface - 람다 함수등을 위한 인터페이스를 지정한다. 
                                                   메소드가 없거나 두개 이상 되면 컴파일 오류가 난다. (자바 8이상)


3. Meta Annotations
위에서 본 기본 어노테이션 외에도 메타 어노테이션Meta Annotation들이 있다. 
이 메타 어노테이션을 이용해 커스텀 어노테이션을 만들어낼 수 있다.
@Retention - 어노테이션의 범위(?)라고 할 수 있겠습니다. 
                            어떤 시점까지 어노테이션이 영향을 미치는지 결정한다.
@Documented - 문서에도 어노테이션의 정보가 표현됩니다.
@Target - 어노테이션이 적용할 위치를 결정한다.
@Inherited - 이 어노테이션을 선언하면 부모클래스에서 어노테이션을 상속 받을 수 있습니다.
@Repeatable - 반복적으로 어노테이션을 선언할 수 있게 한다.