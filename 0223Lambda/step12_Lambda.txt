src
   test1
      LambdaEx1.java  / Print.java --interface
	  LambdaEx2.java  / Print.java
	  LambdaEx3.java    

=======================================
1. Java 8에 도입된 람다식
람다식은 간단히 말해 함수를 변수처럼 사용할수 있는 개념이다.
2014년에 발표된 Java 8에 포함되었다.
JDK8 이전의 자바에는 '메소드'라는 함수 형태가 존재하지만 객체(혹은 클래스)를 통해서만 접근이 가능하고, 
메소드 그 자체를 변수로 사용하지는 못했다.JDK8에서는 함수를 변수처럼사용할수 있기 때문에 파라미터로 
다른 메소드의 인자로 전달할수 있고 리턴값으로 함수를 받을수도 있다. 

2. Java 람다식의 장단점
자바람다식은 사실 완벽한 함수형 프로그래밍방식이라고 할수는 없다. 
이유는 자바 람다식은 함수형에 대해서 새로 정의한 것이 아니고 
기존에 존재하는 Interface의 형태를 빌어 람다식을 표현하기 때문이다. 
그러므로 함수형 프로그래밍의 장점을 완전히 가지지는 못한다. 

장점
1) 코드의 라인수가 줄어든다.
   자바의 verbose(시끄럽고, 형식적인면)한 특성을 감소시킬수 있는 큰 장점이다.
2) 병렬 프로그래밍이 가능하다. 
    iteration방식은 반복대상을 일일히 루프에서 지정하는 반면에,함수형 프로그래밍에서는 반복대상을 사용자코드에서 
    직접 지정하지 않는다. 이로 인해 Collection API가 크게 효과적으로 개선되었다.
3) 메소드로 행동방식을 전달할수 있다. 
    자바 메소드로 값이나 객체를 생성하여 전달하여 전달하던 예전방식과 달리 자바람다에서는 행동방식 그자체를 람다식으로 구현하여 전달한다.
4) 의도의 명확성
    프로그래밍에서 중요한 요소중에 하나는 가독성이 높은 프로그램이다. 
    그러기 위해서는 코드에 작성자의 의도가 명확히 드러나도록 하는 것이 중요하다. 
    람다식을 사용하면 코드에서 드러내고자하는 개발자의 의도를 응축적이면서 추상화시켜서 나타낼수 있게 하기때문에 
    의도를 명확하게 하고 버그가 적은 코드를 작성하게 하는데에 도움을 준다.

단점
1) 람다식의 호출을 위해 직접 메소드를 불러야 한다.
    람다식을 생성하여 다른 함수의 파라미터로 전달하는 것은 자연스러우나 람다식을 실행할때에는 인터페이스에 
    선언된 메소드를 호출하여야 한다.
2) 재귀 람다식의 호출이 까다롭다.
   람다식안에서 자신을 다시 호출하기가 용이하지 않다.
   람다식안에서는 람다식을 가리키는 변수를 참조할수가 없다.
3) 클로저가 지원되지 않는다.
   일반적인 함수형 프로그램에서는 람다식안에서 가리키는 외부 변수에 대해 클로저형태로서 
   외부변수의 라이프 사이클을 연장할수 있지만, 자바에서는 외부변수에 대해 사실상 final 형태로서만 참조할수 있다.  
4) 함수 외부의 값을 변경한다.
    순수함수형 프로그래밍 방식에서는 함수 내부의 동작은 항상 블랙박스이며 함수에 대해 동일한 입력을 하게 되면 동일한 출력을 하게 된다. 
    그러나 자바는 기본적으로 객체모델로서 함수안의 값이 다른 객체의 영향을 받는 경우, 같은 입력값에 대해 다른 출력값을 출력할수있다. 
   이러한 면은 수학적 프로그래밍, 병렬형 프로그래밍에 불리한 방식일수 있다.

3. 특징  
  -람다는 C#(2007년)으로 부터 시작된 익명 함수 처리를 말한다.
  -익명함수 처리로 시작되어 표현식을 간략하게 구현하는 데  중점을 둔다.
  -Java 8의 람다의 표현을 하기 위해서는  자바 함수형 interface의 함수를 구현해야한다.
  -자바 함수형 interface함수는 반드시 1개여야 한다.
  -자바 함수형 Interface란 람다식 또는 메소드 참조 의 할당 대상이 될 interface 말한다. 

4. 자바에서 람다식을 변수로 받는 방법
자바에는 값을 변수로 설정할수 있는 방법이 단 두가지 존재한다. 
1) 원시형태(primitive - int, long, float, double등) 
2) 객체형태(object - class혹은 interface)


*메서드와 함수의 차이
메서드 : 반드시 클래스 안에 포함되어 있어야 하고 행위나 동작을 한다.
함수 : 독립적인 기능
-----------------------------------------------------------------------------------
[형식]
( parameters ) -> { expression body }
( parameters ) -> expression body
() -> { expression body }
() -> expression body    
	- parameters: 매개 인수 목록
    - expression body: 람다 표현식과 표현식을 포함한다
-----------------------------------------------------------------------------------        
ex1)  
int max(int a, int b){ return a>b?a:b; }  
--> (int a, int b) -> { return a>b?a:b; }
--> (int a, int b) -> a>b?a:b;
--> (a, b) -> a>b?a:b;

void view(Sting name, int i){ System.out.println(name+"="+i); }
--> (Sting name, int i) -> { System.out.println(name+"="+i); }
--> (name, i) -> System.out.println(name+"="+i); 

int square(int x){ return x*x; }
--> (int x) ->{ return x*x; }
--> x -> x*x; 

int roll(){ return (int)(Math.random()*5); }
--> ()->(int)(Math.random()*5); 

int sum(int[] arr){
    int s=0;
    for(int i:arr)
        s+=i;
    return s;
}
--> 
(int[] arr)->{
	int s=0;
    for(int i:arr)
        s+=i;
    return s;
}


(a,b) -> a+b;
-->
int sum(int a, int b){
	return a+b;
}

()-> System.out.println("good");
-->
void test(){
	System.out.println("good");
}

name-> "Java" + name;
-->
String view(String name){
	return "Java"+name;
}
----------------------------------------------------------------------------------- 
ex2)스레드
(1)기존의 익명 클래스방식
new Thread(new Runnable() {
	@Override
	public void run() {
		System.out.println("Hello World.");
	}
}).start();

(2)람다방식
new Thread(()->{	sysout("Hello world");}.start();
-----------------------------------------------------------------------------------      
ex3) 컬렉션
Collections.sort 메소드의 두번째는 Comparator인터페이스이며,
Comparator는 추상 메소드는 compare 밖에 정의되어 있지 않기 때문에, 
함수형 인터페이스로 다룰 수있다. 따라서 람다 식 을 전달할 수있다.

	List <Integer> list = Arrays.asList (6, 9, 12);
	Collections.sort (list, (o1, o2) -> Integer.compare (o1, o2) );
	
ex) List 의 forEach 메소드의 인수는 Consumer 인터페이스로,
추상 메소드는 accept 밖에 정의되어 있지 않기 때문에, 함수형 인터페이스로 다룰 수있다.
따라서 메소드 참조 를 전달할 수있다.
	List <Integer> list = Arrays.asList (6, 9, 12);
	list.forEach ( System.out :: println );	





    
    
 